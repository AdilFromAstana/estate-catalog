import React, { useEffect, useRef, useState } from "react";
import type { PropertyResponse } from "../../api/propertyApi";

interface DrawControlProps {
  map: any;
  ymaps: any;
  estates: PropertyResponse[];
  setFilteredEstates: (data: PropertyResponse[]) => void;
}

export const DrawControl: React.FC<DrawControlProps> = React.memo(
  ({ map, ymaps, estates, setFilteredEstates }) => {
    const [isDrawing, setIsDrawing] = useState(false);
    const drawManagerRef = useRef<any>(null);
    const objectManagerRef = useRef<any>(null);
    const polygonRef = useRef<any>(null);

    useEffect(() => {
      if (!map || !ymaps) return;

      // –ñ–¥—ë–º, –ø–æ–∫–∞ –∫–∞—Ä—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞
      ymaps.ready(() => {
        // —Å–æ–∑–¥–∞—ë–º ObjectManager —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if (!objectManagerRef.current) {
          objectManagerRef.current = new ymaps.ObjectManager({
            clusterize: true,
            gridSize: 64,
          });
          map.geoObjects.add(objectManagerRef.current);
          console.log("‚úÖ ObjectManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        const objectManager = objectManagerRef.current;

        // üí° –∂–¥—ë–º 300–º—Å, —á—Ç–æ–±—ã –∫–∞—Ä—Ç–∞ —É—Å–ø–µ–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å—Ç—Ä–æ–∏—Ç—å—Å—è
        setTimeout(() => {
          if (!objectManager) {
            console.warn("‚ö†Ô∏è ObjectManager –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤");
            return;
          }

          // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
          const features = estates
            .filter(
              (e) =>
                e.latitude &&
                e.longitude &&
                !isNaN(Number(e.latitude)) &&
                !isNaN(Number(e.longitude))
            )
            .map((e, idx) => ({
              type: "Feature",
              id: idx,
              geometry: {
                type: "Point",
                coordinates: [Number(e.latitude), Number(e.longitude)],
              },
              properties: { title: e.title ?? "–û–±—ä–µ–∫—Ç" },
            }));

          console.log("–î–æ–±–∞–≤–ª—è–µ–º features:", features.length);

          // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ç–æ—á–µ–∫
          objectManager.add({
            type: "FeatureCollection",
            features,
          });
        }, 300);

        // DrawingManager –¥–ª—è –æ–±–≤–æ–¥–∫–∏
        const drawManager = new ymaps.control.DrawingManager({
          drawingModes: ["polygon"],
        });
        map.controls.add(drawManager);
        drawManagerRef.current = drawManager;

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        drawManager.events.add("overlaychange", (e: any) => {
          const overlay = e.get("newGeometry");
          if (!overlay) return;

          const polygon = overlay.getGeometry();
          polygonRef.current = polygon;

          // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
          objectManager.setFilter((obj: any) => {
            const [lat, lng] = obj.geometry.coordinates;
            return polygon.contains([lat, lng]);
          });
        });

        return () => {
          map.controls.remove(drawManager);
        };
      });
    }, [map, ymaps, estates]);

    return (
      <button
        onClick={() => {
          if (!drawManagerRef.current) return;
          if (isDrawing) {
            drawManagerRef.current.setDrawingMode(null);
            setIsDrawing(false);
          } else {
            drawManagerRef.current.setDrawingMode("polygon");
            setIsDrawing(true);
          }
        }}
        className={`absolute top-4 left-4 z-10 px-3 py-1 rounded-md text-sm font-medium shadow-md transition ${
          isDrawing
            ? "bg-red-500 text-white"
            : "bg-white text-gray-800 border border-gray-300 hover:bg-gray-100"
        }`}
      >
        {isDrawing ? "‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ" : "‚úèÔ∏è –û–±–≤–µ—Å—Ç–∏ –æ–±–ª–∞—Å—Ç—å"}
      </button>
    );
  }
);

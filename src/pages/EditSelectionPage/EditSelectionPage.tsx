import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import HeaderSection from './components/HeaderSection';
import EditDetailsForm from './components/EditDetailsForm';
import MobileFilterToggle from './components/MobileFilterToggle';
import PropertyTableSection from './components/PropertyTableSection';
import SaveButtonStickyFooter from './components/SaveButtonStickyFooter';
import { useCities, useDistricts } from '../../hooks/useCities';
import { useProperties } from '../../hooks/useProperties';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { selectionApi } from '../../api/selectionApi';
import { toast } from 'react-hot-toast';
import { FilterContent } from '../../components/SearchBar';
import { useSelection } from '../../hooks/useSelection';
import type { GetPropertiesParams } from '../../types';

// –¢–∏–ø—ã (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤—ã—à–µ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã)
export interface SelectionDetails {
  title: string;
  description: string;
  isPublic: boolean;
}

export type SelectionMode = 'filters' | 'manual';

const PAGINATION_SIZE = 10;

const EditSelectionPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const queryClient = useQueryClient();
  const selectionId = id ? parseInt(id, 10) : null;

  // === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–±–æ—Ä–∫–∏ ===
  const { data: selectionData, isLoading: isSelectionLoading } = useSelection(selectionId!);
  const isInitialLoading = isSelectionLoading && !selectionData;

  // === 1. –°–æ—Å—Ç–æ—è–Ω–∏—è ===
  const [mode, setMode] = useState<SelectionMode>('filters');
  const [selectionDetails, setSelectionDetails] = useState<SelectionDetails>({
    title: '',
    description: '',
    isPublic: false,
  });
  const [filters, setFilters] = useState<GetPropertiesParams>({});
  const [isFiltersOpen, setIsFiltersOpen] = useState(false);
  const [allSelectedIds, setAllSelectedIds] = useState<Set<number>>(new Set());
  const [isSaving, setIsSaving] = useState(false);

  // 2. –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ü–ê–ì–ò–ù–ê–¶–ò–ò
  const [currentPage, setCurrentPage] = useState(1);

  const totalSelectedCount = allSelectedIds.size;

  // NOTE: totalCount –¥–ª—è —Ä–µ–∂–∏–º–∞ 'filters' –¥–æ–ª–∂–µ–Ω –±—Ä–∞—Ç—å—Å—è –∏–∑ propertiesData, 
  // –∞ –Ω–µ –∏–∑ selectionData, —Ç–∞–∫ –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã.
  // –ï—Å–ª–∏ –≤ 'manual' mode, totalCount –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
  // —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ useProperties.
  const isDisabled = !selectionDetails.title.trim();

  // === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ API ===
  useEffect(() => {
    if (selectionData) {
      const { selection, type } = selectionData;

      setSelectionDetails({
        title: selection.name || '',
        description: selection.description || '',
        isPublic: selection.isShared || false,
      });

      const newMode: SelectionMode = type === 'byFilters' ? 'filters' : 'manual';
      setMode(newMode);
      setCurrentPage(1); // –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

      if (newMode === 'filters' && selection.filters) {
        setFilters({ ...selection.filters, sortBy: "createdAt" });
      } else {
        setFilters({});
      }

      if (newMode === 'manual' && Array.isArray(selection.propertyIds)) {
        // –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ allSelectedIds —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä–æ–º, –Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        // –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä–µ–∫—Ç–æ–≤.
        setAllSelectedIds(new Set(selection.propertyIds));
      } else {
        setAllSelectedIds(new Set());
      }
    }
  }, [selectionData]);

  // === –ì–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω—ã ===
  const { data: cities = [] } = useCities();
  const { data: districts = [] } = useDistricts(filters.cityId ?? undefined);

  // === 3. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç currentPage) ===
  const queryParams = useMemo(() => {
    // –ó–∞–ø—Ä–æ—Å –æ–±—ä–µ–∫—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return {
      ...filters,
      page: currentPage, // üëà –ò–°–ü–û–õ–¨–ó–£–ï–ú –î–ò–ù–ê–ú–ò–ß–ï–°–ö–£–Æ –°–¢–†–ê–ù–ò–¶–£
      limit: PAGINATION_SIZE,
      isPublished: true,
      // –î–æ–±–∞–≤–ª—è–µ–º propertyIds –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      ...(mode === 'manual' && allSelectedIds.size > 0 && { propertyIds: Array.from(allSelectedIds) }),
    };
  }, [filters, currentPage, mode, allSelectedIds]);

  const { data: propertiesData, isLoading: isPropertiesLoading } = useProperties(queryParams);
  const properties = propertiesData?.data ?? [];
  const totalCount = propertiesData?.total ?? 0; // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –∫–∞–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

  // === –ú—É—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
  const updateMutation = useMutation({
    mutationFn: (payload: any) => selectionApi.updateSelection(selectionId!, payload),
    onSuccess: () => {
      toast.success('–ü–æ–¥–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
      queryClient.invalidateQueries({ queryKey: ['selection', selectionId] });
      queryClient.invalidateQueries({ queryKey: ['selections'] });
    },
    onError: (error: any) => {
      toast.error(error?.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    },
  });

  // === 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
  const handlePageChange = useCallback((newPage: number) => {
    const totalPages = Math.ceil(totalCount / PAGINATION_SIZE);

    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  }, [totalCount]);

  // === 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
  const handleSetMode = useCallback((newMode: SelectionMode) => {
    setMode(newMode);
    setCurrentPage(1); // üëà –°–ë–†–û–° –°–¢–†–ê–ù–ò–¶–´
    if (newMode === 'manual') {
      setFilters({});
      // allSelectedIds –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
      // setAllSelectedIds(new Set()); // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ID
    }
  }, []);

  const handleFilterChange = useCallback((key: keyof GetPropertiesParams, value: any) => {
    setFilters(prev => ({ ...prev, [key]: value }));
    setCurrentPage(1); // üëà –°–ë–†–û–° –°–¢–†–ê–ù–ò–¶–´
  }, []);

  const handleResetFilters = useCallback(() => {
    setFilters({});
    setCurrentPage(1); // üëà –°–ë–†–û–° –°–¢–†–ê–ù–ò–¶–´
  }, []);

  const handleToggleSelect = useCallback((id: number) => {
    setAllSelectedIds(prev => {
      const newSet = new Set(prev);
      newSet.has(id) ? newSet.delete(id) : newSet.add(id);
      return newSet;
    });
  }, []);

  const handleDetailsChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    const checked = (e.target as HTMLInputElement).checked;
    setSelectionDetails(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  }, []);

  const handleSave = () => {
    if (isDisabled || !selectionId) return;

    setIsSaving(true);
    const payload =
      mode === 'filters'
        ? {
          name: selectionDetails.title,
          description: selectionDetails.description,
          isShared: selectionDetails.isPublic,
          filters,
        }
        : {
          name: selectionDetails.title,
          description: selectionDetails.description,
          isShared: selectionDetails.isPublic,
          propertyIds: Array.from(allSelectedIds),
        };

    updateMutation.mutate(payload, {
      onSettled: () => setIsSaving(false),
    });
  };

  // === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ===
  const propertiesWithSelection = useMemo(() => {
    return properties.map(prop => ({
      ...prop,
      selected: allSelectedIds.has(prop.id),
    }));
  }, [properties, allSelectedIds]);

  // === 6. –ü—Ä–æ–ø—Å—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û) ===
  const paginationProps = {
    totalCount,
    pageSize: PAGINATION_SIZE,
    currentPage: currentPage, // üëà –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –ó–ù–ê–ß–ï–ù–ò–ï
    onPageChange: handlePageChange, // üëà –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø
    isLoading: isPropertiesLoading,
  };

  const filterOptions = {
    cities,
    districts,
    minPrice: 0,
    maxPrice: 200_000_000,
    rooms: [1, 2, 3, 4, 5],
    minFloor: 1,
    maxFloor: 30,
  };

  // === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—à–∏–±–∫–∏ ===
  if (isInitialLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–±–æ—Ä–∫–∏...</div>
      </div>
    );
  }

  if (!selectionData || !selectionId) {
    return (
      <div className="min-h-screen flex items-center justify-center text-red-500">
        –ü–æ–¥–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      </div>
    );
  }

  return (
    <div className="min-h-screen w-full mx-auto">
      <HeaderSection
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É"
        onSave={handleSave}
        isSaving={isSaving}
        isDisabled={isDisabled}
      />

      <div className="space-y-6 md:space-y-8 mt-6">
        <EditDetailsForm
          data={selectionDetails}
          handleChange={handleDetailsChange}
        />

        <div className="lg:grid lg:grid-cols-12 lg:gap-8 mt-6 md:mt-8">
          <div className="lg:col-span-8 space-y-6 order-1 lg:order-2">
            <MobileFilterToggle
              isFiltersOpen={isFiltersOpen}
              setIsFiltersOpen={setIsFiltersOpen}
            />

            <PropertyTableSection
              mode={mode}
              setMode={handleSetMode}
              properties={propertiesWithSelection}
              onToggleSelect={handleToggleSelect}
              pagination={paginationProps}
              isLoading={isPropertiesLoading}
              totalSelectedCount={totalSelectedCount}
            />
          </div>

          <div className={`lg:col-span-4 space-y-6 order-2 lg:order-1 mt-6 lg:mt-0 
                        ${isFiltersOpen ? 'block' : 'hidden'} lg:block`
          }>
            <FilterContent
              filters={filters}
              onFilterChange={handleFilterChange}
              onResetFilters={handleResetFilters}
              filterOptions={filterOptions}
            />
          </div>
        </div>
      </div>

      <SaveButtonStickyFooter
        onSave={handleSave}
        isDisabled={isDisabled}
        isSaving={isSaving}
      />
    </div>
  );
};

export default EditSelectionPage;